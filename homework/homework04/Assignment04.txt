1. y:= not-A or C
   x:= (A NAND A) NAND (B NAND C)

2. Picture Uploaded in Github

3.  a. AND 0xAAAAAAAA
    b. OR 0x00000007
    c. AND 0x00000007
    d. OR 0xFFFFFFFF
    e. XOR 0xC0000000
    f. AND 0xFFFFFFF8

4.          JMP    start
    num:    0
    max:    256
    inc:    1
    start:  LOAD    num
            WRITE   0x8
            ADD     inc
            STORE   num
            SUB     max
            JLZ     start
    end:    JMP     end

5.  C0000004
    00000000
    00000100
    00000001
    00000001
    30000008
    40000003
    10000001
    50000002
    E0000004
    C000000A

6.              JMP     start
    temp1:      0
    temp2:      0
    greater:    0
    smaller:    0
    count:      0
    one:        1
    start:      READ    0x100
                STORE   temp1
                READ    0x100
                STORE   temp2
                SUB     temp1
                JGZ     grtTn
                LOAD    temp2
                STORE   smaller
                STORE   count
                LOAD    temp1
                STORE   greater
                JMP     loop

    grtTn:      LOAD    temp2
                STORE   greater
                LOAD    temp1
                STORE   smaller
                STORE   count
                JMP     loop

    loop:       LOAD    smaller
                MOD     count
                JGZ     notgcf
                LOAD    greater
                MOD     count
                JGZ     notgcf
                LOAD    count
                WRITE   0x100
                JMP     end
    
    notgcf:     LOAD    count
                SUB     one
                STORE   count
                JMP     loop

    end:        JMP     end


7.  temp:   0
    temp2:  0
            STORE   temp
            LOAD    0x30AA
            STORE   temp2
            LOAD    temp
            STORE   0x30AA
            LOAD    temp2

8.  JGZ     0x837BBE1
    JZ      0x837BBE1

9.  Part 1: The data in r8 and r9 have been switched, in other words the value that was
    in r8 is now in r9 and the value in r9 is now in r8.

    Part 2: To understand why this effect happens we can consider four cases, because we are using a bitwise XOR we can XOR [0,0], XOR [1,1], XOR [1,0], and XOR [0,1].
    These are the only four cases we need to consider because bitwise XOR only effects the two bits it is used on, so we can think of just one set of XOR operations per 
    bit in r8 or r9. The two easy cases are [0,0] and [1,1]. Zero xor zero is zero, xor with zero is still zero. So in affect the bits are switched, since zero switched
    with zero is still [0,0]. The same goes for [1,1]. The next case is [0,1]. Xor between 0 and 1 is 1, XOR between 1 and 1 is 0. Therefore we now have [1,0]. The bits
    have flipped, from [0,1], to [1,0]. The same goes for the case of [0,1]. Therefore, not matter what pattern the bits are, the result after the XOR operations is the 
    flipping of the bit. If you do this for each set of bits in r8 and r9, you will have switched the values of r8 and r9. 
